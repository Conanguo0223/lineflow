_current_progress_remaining:
    value: 1
_custom_logger:
    value: "False"
_episode_num:
    value: 0
_last_episode_starts:
    value: '[ True  True  True  True  True]'
_last_lstm_states:
    value: |-
        RNNStates(pi=(tensor([[[0., 0., 0.,  ..., 0., 0., 0.],
                 [0., 0., 0.,  ..., 0., 0., 0.],
                 [0., 0., 0.,  ..., 0., 0., 0.],
                 [0., 0., 0.,  ..., 0., 0., 0.],
                 [0., 0., 0.,  ..., 0., 0., 0.]]], device='cuda:0'), tensor([[[0., 0., 0.,  ..., 0., 0., 0.],
                 [0., 0., 0.,  ..., 0., 0., 0.],
                 [0., 0., 0.,  ..., 0., 0., 0.],
                 [0., 0., 0.,  ..., 0., 0., 0.],
                 [0., 0., 0.,  ..., 0., 0., 0.]]], device='cuda:0')), vf=(tensor([[[0., 0., 0.,  ..., 0., 0., 0.],
                 [0., 0., 0.,  ..., 0., 0., 0.],
                 [0., 0., 0.,  ..., 0., 0., 0.],
                 [0., 0., 0.,  ..., 0., 0., 0.],
                 [0., 0., 0.,  ..., 0., 0., 0.]]], device='cuda:0'), tensor([[[0., 0., 0.,  ..., 0., 0., 0.],
                 [0., 0., 0.,  ..., 0., 0., 0.],
                 [0., 0., 0.,  ..., 0., 0., 0.],
                 [0., 0., 0.,  ..., 0., 0., 0.],
                 [0., 0., 0.,  ..., 0., 0., 0.]]], device='cuda:0')))
_last_obs:
    value: |-
        [[[ 1.  0.  0.  0.  0.  0.  1.  0.  1. 20.  1.  0.  0.  0.]]

         [[ 1.  0.  0.  0.  0.  0.  1.  0.  1. 20.  1.  0.  0.  0.]]

         [[ 1.  0.  0.  0.  0.  0.  1.  0.  1. 20.  1.  0.  0.  0.]]

         [[ 1.  0.  0.  0.  0.  0.  1.  0.  1. 20.  1.  0.  0.  0.]]

         [[ 1.  0.  0.  0.  0.  0.  1.  0.  1. 20.  1.  0.  0.  0.]]]
_last_original_obs:
    value: None
_logger:
    value: <stable_baselines3.common.logger.Logger object at 0x7335bcf15c70>
_n_updates:
    value: 0
_num_timesteps_at_start:
    value: 0
_stats_window_size:
    value: 10
_total_timesteps:
    value: 1000000
_vec_normalize_env:
    value: None
_wandb:
    value:
        cli_version: 0.20.1
        m: []
        python_version: 3.9.21
        t:
            "1":
                - 1
                - 77
            "2":
                - 1
                - 77
            "3":
                - 2
                - 16
                - 22
                - 35
                - 55
            "4": 3.9.21
            "5": 0.20.1
            "12": 0.20.1
            "13": linux-x86_64
action_noise:
    value: None
action_space:
    value: MultiDiscrete([100])
algo:
    value: RecurrentPPO
batch_size:
    value: 500
clip_range:
    value: 0.2
clip_range_vf:
    value: None
curriculum:
    value: false
deterministic:
    value: true
device:
    value: cuda:0
ent_coef:
    value: 0.01
env:
    value: waiting_time
ep_info_buffer:
    value: deque([], maxlen=10)
ep_success_buffer:
    value: deque([], maxlen=10)
eval_reward:
    value: parts
gae_lambda:
    value: 0.95
gamma:
    value: 0.99
info:
    value:
        - - S_component
          - waiting_time
learning_rate:
    value: 0.001
log_dir:
    value: ./logs
lr_schedule:
    value: <function get_schedule_fn.<locals>.<lambda> at 0x73346d545a60>
max_grad_norm:
    value: 0.5
model:
    value: PPO
n_cells:
    value: 4
n_envs:
    value: 5
n_epochs:
    value: 5
n_stack:
    value: 1
n_steps:
    value: 500
normalize_advantage:
    value: false
num_timesteps:
    value: 0
observation_space:
    value: Box(0.0, [[  2. 199.   0.   2.  99.   0.   2.  inf  inf  inf   2.   1.   1.   1.]], (1, 14), float32)
policy:
    value: |-
        RecurrentActorCriticPolicy(
          (features_extractor): FlattenExtractor(
            (flatten): Flatten(start_dim=1, end_dim=-1)
          )
          (pi_features_extractor): FlattenExtractor(
            (flatten): Flatten(start_dim=1, end_dim=-1)
          )
          (vf_features_extractor): FlattenExtractor(
            (flatten): Flatten(start_dim=1, end_dim=-1)
          )
          (mlp_extractor): MlpExtractor(
            (policy_net): Sequential(
              (0): Linear(in_features=256, out_features=64, bias=True)
              (1): Tanh()
              (2): Linear(in_features=64, out_features=64, bias=True)
              (3): Tanh()
            )
            (value_net): Sequential(
              (0): Linear(in_features=256, out_features=64, bias=True)
              (1): Tanh()
              (2): Linear(in_features=64, out_features=64, bias=True)
              (3): Tanh()
            )
          )
          (action_net): Linear(in_features=64, out_features=100, bias=True)
          (value_net): Linear(in_features=64, out_features=1, bias=True)
          (lstm_actor): LSTM(14, 256)
          (lstm_critic): LSTM(14, 256)
        )
policy_class:
    value: <class 'sb3_contrib.common.recurrent.policies.RecurrentActorCriticPolicy'>
policy_kwargs:
    value: '{}'
recurrent:
    value: true
rollout_buffer:
    value: <sb3_contrib.common.recurrent.buffers.RecurrentRolloutBuffer object at 0x7335bcf6ccd0>
rollout_buffer_class:
    value: None
rollout_buffer_kwargs:
    value: '{}'
rollout_reward:
    value: parts
sde_sample_freq:
    value: -1
seed:
    value: 11
simulation_end:
    value: 4000
start_time:
    value: 1752211887765516330
target_kl:
    value: None
tensorboard_log:
    value: ./logs/gcggk4oo
total_steps:
    value: 1000000
use_sde:
    value: "False"
verbose:
    value: 0
vf_coef:
    value: 0.5
